/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UserImport } from './routes/user'
import { Route as AuthImport } from './routes/auth'
import { Route as AdminImport } from './routes/admin'
import { Route as IndexImport } from './routes/index'
import { Route as UserProdutosImport } from './routes/user/produtos'
import { Route as UserPedidosImport } from './routes/user/pedidos'
import { Route as UserMovimentacoesImport } from './routes/user/movimentacoes'
import { Route as UserItensImport } from './routes/user/itens'
import { Route as UserFornecedoresImport } from './routes/user/fornecedores'
import { Route as DemoTanstackQueryImport } from './routes/demo.tanstack-query'
import { Route as DemoTableImport } from './routes/demo.table'
import { Route as AdminUsuariosImport } from './routes/admin/usuarios'
import { Route as AdminProdutosImport } from './routes/admin/produtos'
import { Route as AdminPedidosImport } from './routes/admin/pedidos'
import { Route as AdminItensImport } from './routes/admin/itens'
import { Route as AdminFornecedoresImport } from './routes/admin/fornecedores'
import { Route as AdminCategoriasImport } from './routes/admin/categorias'
import { Route as AdminAlertasImport } from './routes/admin/alertas'
import { Route as DemoFormSimpleImport } from './routes/demo.form.simple'
import { Route as DemoFormAddressImport } from './routes/demo.form.address'

// Create/Update Routes

const UserRoute = UserImport.update({
  id: '/user',
  path: '/user',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const AdminRoute = AdminImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UserProdutosRoute = UserProdutosImport.update({
  id: '/produtos',
  path: '/produtos',
  getParentRoute: () => UserRoute,
} as any)

const UserPedidosRoute = UserPedidosImport.update({
  id: '/pedidos',
  path: '/pedidos',
  getParentRoute: () => UserRoute,
} as any)

const UserMovimentacoesRoute = UserMovimentacoesImport.update({
  id: '/movimentacoes',
  path: '/movimentacoes',
  getParentRoute: () => UserRoute,
} as any)

const UserItensRoute = UserItensImport.update({
  id: '/itens',
  path: '/itens',
  getParentRoute: () => UserRoute,
} as any)

const UserFornecedoresRoute = UserFornecedoresImport.update({
  id: '/fornecedores',
  path: '/fornecedores',
  getParentRoute: () => UserRoute,
} as any)

const DemoTanstackQueryRoute = DemoTanstackQueryImport.update({
  id: '/demo/tanstack-query',
  path: '/demo/tanstack-query',
  getParentRoute: () => rootRoute,
} as any)

const DemoTableRoute = DemoTableImport.update({
  id: '/demo/table',
  path: '/demo/table',
  getParentRoute: () => rootRoute,
} as any)

const AdminUsuariosRoute = AdminUsuariosImport.update({
  id: '/usuarios',
  path: '/usuarios',
  getParentRoute: () => AdminRoute,
} as any)

const AdminProdutosRoute = AdminProdutosImport.update({
  id: '/produtos',
  path: '/produtos',
  getParentRoute: () => AdminRoute,
} as any)

const AdminPedidosRoute = AdminPedidosImport.update({
  id: '/pedidos',
  path: '/pedidos',
  getParentRoute: () => AdminRoute,
} as any)

const AdminItensRoute = AdminItensImport.update({
  id: '/itens',
  path: '/itens',
  getParentRoute: () => AdminRoute,
} as any)

const AdminFornecedoresRoute = AdminFornecedoresImport.update({
  id: '/fornecedores',
  path: '/fornecedores',
  getParentRoute: () => AdminRoute,
} as any)

const AdminCategoriasRoute = AdminCategoriasImport.update({
  id: '/categorias',
  path: '/categorias',
  getParentRoute: () => AdminRoute,
} as any)

const AdminAlertasRoute = AdminAlertasImport.update({
  id: '/alertas',
  path: '/alertas',
  getParentRoute: () => AdminRoute,
} as any)

const DemoFormSimpleRoute = DemoFormSimpleImport.update({
  id: '/demo/form/simple',
  path: '/demo/form/simple',
  getParentRoute: () => rootRoute,
} as any)

const DemoFormAddressRoute = DemoFormAddressImport.update({
  id: '/demo/form/address',
  path: '/demo/form/address',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/user': {
      id: '/user'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof UserImport
      parentRoute: typeof rootRoute
    }
    '/admin/alertas': {
      id: '/admin/alertas'
      path: '/alertas'
      fullPath: '/admin/alertas'
      preLoaderRoute: typeof AdminAlertasImport
      parentRoute: typeof AdminImport
    }
    '/admin/categorias': {
      id: '/admin/categorias'
      path: '/categorias'
      fullPath: '/admin/categorias'
      preLoaderRoute: typeof AdminCategoriasImport
      parentRoute: typeof AdminImport
    }
    '/admin/fornecedores': {
      id: '/admin/fornecedores'
      path: '/fornecedores'
      fullPath: '/admin/fornecedores'
      preLoaderRoute: typeof AdminFornecedoresImport
      parentRoute: typeof AdminImport
    }
    '/admin/itens': {
      id: '/admin/itens'
      path: '/itens'
      fullPath: '/admin/itens'
      preLoaderRoute: typeof AdminItensImport
      parentRoute: typeof AdminImport
    }
    '/admin/pedidos': {
      id: '/admin/pedidos'
      path: '/pedidos'
      fullPath: '/admin/pedidos'
      preLoaderRoute: typeof AdminPedidosImport
      parentRoute: typeof AdminImport
    }
    '/admin/produtos': {
      id: '/admin/produtos'
      path: '/produtos'
      fullPath: '/admin/produtos'
      preLoaderRoute: typeof AdminProdutosImport
      parentRoute: typeof AdminImport
    }
    '/admin/usuarios': {
      id: '/admin/usuarios'
      path: '/usuarios'
      fullPath: '/admin/usuarios'
      preLoaderRoute: typeof AdminUsuariosImport
      parentRoute: typeof AdminImport
    }
    '/demo/table': {
      id: '/demo/table'
      path: '/demo/table'
      fullPath: '/demo/table'
      preLoaderRoute: typeof DemoTableImport
      parentRoute: typeof rootRoute
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/demo/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryImport
      parentRoute: typeof rootRoute
    }
    '/user/fornecedores': {
      id: '/user/fornecedores'
      path: '/fornecedores'
      fullPath: '/user/fornecedores'
      preLoaderRoute: typeof UserFornecedoresImport
      parentRoute: typeof UserImport
    }
    '/user/itens': {
      id: '/user/itens'
      path: '/itens'
      fullPath: '/user/itens'
      preLoaderRoute: typeof UserItensImport
      parentRoute: typeof UserImport
    }
    '/user/movimentacoes': {
      id: '/user/movimentacoes'
      path: '/movimentacoes'
      fullPath: '/user/movimentacoes'
      preLoaderRoute: typeof UserMovimentacoesImport
      parentRoute: typeof UserImport
    }
    '/user/pedidos': {
      id: '/user/pedidos'
      path: '/pedidos'
      fullPath: '/user/pedidos'
      preLoaderRoute: typeof UserPedidosImport
      parentRoute: typeof UserImport
    }
    '/user/produtos': {
      id: '/user/produtos'
      path: '/produtos'
      fullPath: '/user/produtos'
      preLoaderRoute: typeof UserProdutosImport
      parentRoute: typeof UserImport
    }
    '/demo/form/address': {
      id: '/demo/form/address'
      path: '/demo/form/address'
      fullPath: '/demo/form/address'
      preLoaderRoute: typeof DemoFormAddressImport
      parentRoute: typeof rootRoute
    }
    '/demo/form/simple': {
      id: '/demo/form/simple'
      path: '/demo/form/simple'
      fullPath: '/demo/form/simple'
      preLoaderRoute: typeof DemoFormSimpleImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface AdminRouteChildren {
  AdminAlertasRoute: typeof AdminAlertasRoute
  AdminCategoriasRoute: typeof AdminCategoriasRoute
  AdminFornecedoresRoute: typeof AdminFornecedoresRoute
  AdminItensRoute: typeof AdminItensRoute
  AdminPedidosRoute: typeof AdminPedidosRoute
  AdminProdutosRoute: typeof AdminProdutosRoute
  AdminUsuariosRoute: typeof AdminUsuariosRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminAlertasRoute: AdminAlertasRoute,
  AdminCategoriasRoute: AdminCategoriasRoute,
  AdminFornecedoresRoute: AdminFornecedoresRoute,
  AdminItensRoute: AdminItensRoute,
  AdminPedidosRoute: AdminPedidosRoute,
  AdminProdutosRoute: AdminProdutosRoute,
  AdminUsuariosRoute: AdminUsuariosRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

interface UserRouteChildren {
  UserFornecedoresRoute: typeof UserFornecedoresRoute
  UserItensRoute: typeof UserItensRoute
  UserMovimentacoesRoute: typeof UserMovimentacoesRoute
  UserPedidosRoute: typeof UserPedidosRoute
  UserProdutosRoute: typeof UserProdutosRoute
}

const UserRouteChildren: UserRouteChildren = {
  UserFornecedoresRoute: UserFornecedoresRoute,
  UserItensRoute: UserItensRoute,
  UserMovimentacoesRoute: UserMovimentacoesRoute,
  UserPedidosRoute: UserPedidosRoute,
  UserProdutosRoute: UserProdutosRoute,
}

const UserRouteWithChildren = UserRoute._addFileChildren(UserRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/auth': typeof AuthRoute
  '/user': typeof UserRouteWithChildren
  '/admin/alertas': typeof AdminAlertasRoute
  '/admin/categorias': typeof AdminCategoriasRoute
  '/admin/fornecedores': typeof AdminFornecedoresRoute
  '/admin/itens': typeof AdminItensRoute
  '/admin/pedidos': typeof AdminPedidosRoute
  '/admin/produtos': typeof AdminProdutosRoute
  '/admin/usuarios': typeof AdminUsuariosRoute
  '/demo/table': typeof DemoTableRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/user/fornecedores': typeof UserFornecedoresRoute
  '/user/itens': typeof UserItensRoute
  '/user/movimentacoes': typeof UserMovimentacoesRoute
  '/user/pedidos': typeof UserPedidosRoute
  '/user/produtos': typeof UserProdutosRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/auth': typeof AuthRoute
  '/user': typeof UserRouteWithChildren
  '/admin/alertas': typeof AdminAlertasRoute
  '/admin/categorias': typeof AdminCategoriasRoute
  '/admin/fornecedores': typeof AdminFornecedoresRoute
  '/admin/itens': typeof AdminItensRoute
  '/admin/pedidos': typeof AdminPedidosRoute
  '/admin/produtos': typeof AdminProdutosRoute
  '/admin/usuarios': typeof AdminUsuariosRoute
  '/demo/table': typeof DemoTableRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/user/fornecedores': typeof UserFornecedoresRoute
  '/user/itens': typeof UserItensRoute
  '/user/movimentacoes': typeof UserMovimentacoesRoute
  '/user/pedidos': typeof UserPedidosRoute
  '/user/produtos': typeof UserProdutosRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/auth': typeof AuthRoute
  '/user': typeof UserRouteWithChildren
  '/admin/alertas': typeof AdminAlertasRoute
  '/admin/categorias': typeof AdminCategoriasRoute
  '/admin/fornecedores': typeof AdminFornecedoresRoute
  '/admin/itens': typeof AdminItensRoute
  '/admin/pedidos': typeof AdminPedidosRoute
  '/admin/produtos': typeof AdminProdutosRoute
  '/admin/usuarios': typeof AdminUsuariosRoute
  '/demo/table': typeof DemoTableRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/user/fornecedores': typeof UserFornecedoresRoute
  '/user/itens': typeof UserItensRoute
  '/user/movimentacoes': typeof UserMovimentacoesRoute
  '/user/pedidos': typeof UserPedidosRoute
  '/user/produtos': typeof UserProdutosRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/auth'
    | '/user'
    | '/admin/alertas'
    | '/admin/categorias'
    | '/admin/fornecedores'
    | '/admin/itens'
    | '/admin/pedidos'
    | '/admin/produtos'
    | '/admin/usuarios'
    | '/demo/table'
    | '/demo/tanstack-query'
    | '/user/fornecedores'
    | '/user/itens'
    | '/user/movimentacoes'
    | '/user/pedidos'
    | '/user/produtos'
    | '/demo/form/address'
    | '/demo/form/simple'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/auth'
    | '/user'
    | '/admin/alertas'
    | '/admin/categorias'
    | '/admin/fornecedores'
    | '/admin/itens'
    | '/admin/pedidos'
    | '/admin/produtos'
    | '/admin/usuarios'
    | '/demo/table'
    | '/demo/tanstack-query'
    | '/user/fornecedores'
    | '/user/itens'
    | '/user/movimentacoes'
    | '/user/pedidos'
    | '/user/produtos'
    | '/demo/form/address'
    | '/demo/form/simple'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/auth'
    | '/user'
    | '/admin/alertas'
    | '/admin/categorias'
    | '/admin/fornecedores'
    | '/admin/itens'
    | '/admin/pedidos'
    | '/admin/produtos'
    | '/admin/usuarios'
    | '/demo/table'
    | '/demo/tanstack-query'
    | '/user/fornecedores'
    | '/user/itens'
    | '/user/movimentacoes'
    | '/user/pedidos'
    | '/user/produtos'
    | '/demo/form/address'
    | '/demo/form/simple'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  AuthRoute: typeof AuthRoute
  UserRoute: typeof UserRouteWithChildren
  DemoTableRoute: typeof DemoTableRoute
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
  DemoFormAddressRoute: typeof DemoFormAddressRoute
  DemoFormSimpleRoute: typeof DemoFormSimpleRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  AuthRoute: AuthRoute,
  UserRoute: UserRouteWithChildren,
  DemoTableRoute: DemoTableRoute,
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
  DemoFormAddressRoute: DemoFormAddressRoute,
  DemoFormSimpleRoute: DemoFormSimpleRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/admin",
        "/auth",
        "/user",
        "/demo/table",
        "/demo/tanstack-query",
        "/demo/form/address",
        "/demo/form/simple"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/admin": {
      "filePath": "admin.tsx",
      "children": [
        "/admin/alertas",
        "/admin/categorias",
        "/admin/fornecedores",
        "/admin/itens",
        "/admin/pedidos",
        "/admin/produtos",
        "/admin/usuarios"
      ]
    },
    "/auth": {
      "filePath": "auth.tsx"
    },
    "/user": {
      "filePath": "user.tsx",
      "children": [
        "/user/fornecedores",
        "/user/itens",
        "/user/movimentacoes",
        "/user/pedidos",
        "/user/produtos"
      ]
    },
    "/admin/alertas": {
      "filePath": "admin/alertas.tsx",
      "parent": "/admin"
    },
    "/admin/categorias": {
      "filePath": "admin/categorias.tsx",
      "parent": "/admin"
    },
    "/admin/fornecedores": {
      "filePath": "admin/fornecedores.tsx",
      "parent": "/admin"
    },
    "/admin/itens": {
      "filePath": "admin/itens.tsx",
      "parent": "/admin"
    },
    "/admin/pedidos": {
      "filePath": "admin/pedidos.tsx",
      "parent": "/admin"
    },
    "/admin/produtos": {
      "filePath": "admin/produtos.tsx",
      "parent": "/admin"
    },
    "/admin/usuarios": {
      "filePath": "admin/usuarios.tsx",
      "parent": "/admin"
    },
    "/demo/table": {
      "filePath": "demo.table.tsx"
    },
    "/demo/tanstack-query": {
      "filePath": "demo.tanstack-query.tsx"
    },
    "/user/fornecedores": {
      "filePath": "user/fornecedores.tsx",
      "parent": "/user"
    },
    "/user/itens": {
      "filePath": "user/itens.tsx",
      "parent": "/user"
    },
    "/user/movimentacoes": {
      "filePath": "user/movimentacoes.tsx",
      "parent": "/user"
    },
    "/user/pedidos": {
      "filePath": "user/pedidos.tsx",
      "parent": "/user"
    },
    "/user/produtos": {
      "filePath": "user/produtos.tsx",
      "parent": "/user"
    },
    "/demo/form/address": {
      "filePath": "demo.form.address.tsx"
    },
    "/demo/form/simple": {
      "filePath": "demo.form.simple.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
